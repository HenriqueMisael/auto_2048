{"version":3,"sources":["src/sketch.ts","src/game/game.ts","src/game/boardState.ts","src/player/search-tree.ts","src/player/auto.ts","src/player/player.ts","src/player/human.ts"],"names":[],"mappings":"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","file":"","sourcesContent":["import p5 from 'p5';\n\nimport { Game } from './game/game';\nimport { Player } from './player/player';\nimport { SearchTreePlayer } from './player/search-tree';\nimport { BoardState } from './game/boardState';\nimport { KeyboardPlayer } from './player/human';\n\nexport function randomInt(min: number, max: number) {\n  return Math.ceil(Math.random() * (max - min) + min);\n}\n\nfunction getParameterByName(name: string, defaultValue: number): number {\n  const url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),\n    results = regex.exec(url);\n  if (!results) return defaultValue;\n  if (!results[2]) return defaultValue;\n  return parseInt(decodeURIComponent(results[2].replace(/\\+/g, ' ')));\n}\n\nconst PLAYER_HUMAN = 1;\nconst PLAYER_SEARCH_TREE = 2;\n\nconst RUNS = getParameterByName('runs', 16);\nconst GAME_SIZE = getParameterByName('size', 4);\nconst AMOUNT = getParameterByName('amount', 1);\nconst PLAYER = getParameterByName('player', PLAYER_HUMAN);\nconst GAME_HEIGHT = Game.boardBorder * 5 + Game.pieceSize * GAME_SIZE;\nconst GAME_WIDTH = Game.boardBorder * 5 + Game.pieceSize * GAME_SIZE;\n\nconst colors = [\n  '#dedede',\n  '#decdcd',\n  '#cdbcbc',\n  '#bcabab',\n  '#ab9a9a',\n  '#9a8989',\n  '#897878',\n  '#786767',\n  '#675656',\n  '#564545',\n  '#453434',\n  '#342323',\n  '#231212',\n];\n\nconst sketch = function (p: p5) {\n  let players: Player[] = [];\n  let games: Game[] = [];\n\n  function addGame(size: number) {\n    const game = new Game(size);\n    games.push(game);\n    return game;\n  }\n\n  let gamesMatrix: Game[][] = [];\n\n  function distributeGames(games: Game[]) {\n    gamesMatrix = [];\n    const gamesPerRow = Math.floor(p.windowWidth / GAME_WIDTH);\n\n    let i = 0;\n    for (let k = 0; k < games.length; ) {\n      const row = [];\n      for (let j = 0; j < gamesPerRow; j++) {\n        row[j] = games[k++];\n      }\n      gamesMatrix[i++] = row;\n    }\n  }\n\n  p.preload = () => {};\n\n  let drawButton: any;\n\n  p.setup = function () {\n    p.frameRate(60);\n\n    drawButton = p.createButton('Toggle drawing');\n    drawButton.mouseClicked(() => (drawButton.active = !drawButton.active));\n    drawButton.active = true;\n\n    if (PLAYER === PLAYER_HUMAN) {\n      players.push(new KeyboardPlayer(addGame(GAME_SIZE)));\n    } else if (PLAYER === PLAYER_SEARCH_TREE) {\n      for (let i = 0; i < AMOUNT; i++)\n        players.push(new SearchTreePlayer(addGame(GAME_SIZE), RUNS));\n    } else {\n      throw new Error(\"Need to set a player\")\n    }\n    distributeGames(games);\n\n    const rows = gamesMatrix.length;\n    const columns = gamesMatrix[0].length;\n    const height = rows * GAME_HEIGHT;\n    const width = columns * GAME_WIDTH;\n    p.createCanvas(width, height);\n  };\n\n  p.windowResized = function () {\n    distributeGames(games);\n  };\n\n  function drawBoard(board: BoardState) {\n    p.strokeWeight(0);\n    p.translate(Game.boardBorder, Game.boardBorder);\n    // console.log('-------');\n    board.copyState.forEach((row, i) => {\n      // console.log(row);\n      row.forEach((value, j) => {\n        p.fill(value === 0 ? '#888888' : colors[Math.min(value, colors.length - 1)]);\n\n        const top = i * (Game.pieceSize + Game.boardBorder);\n        const left = j * (Game.pieceSize + Game.boardBorder);\n\n        p.square(left, top, Game.pieceSize);\n\n        if (value === 0) return;\n\n        p.fill('white');\n        p.textSize(16);\n        p.textStyle(p.BOLD);\n        p.textAlign(p.CENTER, p.CENTER);\n        p.text(\n          Math.pow(2, value),\n          left + Game.pieceMiddleOffset,\n          top + Game.pieceMiddleOffset,\n        );\n      });\n    });\n  }\n\n  p.draw = function () {\n    if (drawButton.active) {\n      gamesMatrix.forEach((row, i) => {\n        p.push();\n        p.translate(0, GAME_HEIGHT * i);\n        row.forEach((game, j) => {\n          if (!game || game.ended) return;\n\n          p.push();\n          p.translate(GAME_WIDTH * j, 0);\n\n          drawBoard(game.boardState);\n\n          p.pop();\n        });\n        p.pop();\n      });\n      // } else {\n      //   p.stroke('#333333');\n      //   p.fill('#333333');\n      //   p.rect(0, 0, GAME_WIDTH * gamesMatrix[0].length, GAME_HEIGHT * gamesMatrix.length);\n    }\n    players.forEach((player) => player.turnPassed());\n    for (let i = 0; i < players.length; i++) {\n      const { game } = players[i];\n      game.pastTime += p.deltaTime;\n      if (game.ended) {\n        console.log(\n          'Time: ',\n          game.pastTime,\n          'Score:',\n          game.totalScore,\n          'Peça:',\n          game.higherPiece,\n        );\n\n        const newGame = new Game(game.boardState.size);\n        games[i] = newGame;\n        players[i] = new SearchTreePlayer(newGame, RUNS);\n        distributeGames(games);\n      }\n    }\n  };\n\n  // @ts-ignore\n  p.keyPressed = function (evt) {\n    players.forEach((player: Player) => player.keyPressed(evt));\n  };\n};\n\nnew p5(sketch);\n\ndocument.body.style.backgroundColor = '#333333';\n","import { BoardState } from './boardState';\n\nexport class Game {\n  boardState: BoardState;\n  public totalScore: number;\n  public pastTime: number;\n  private _ended: boolean = false;\n\n  constructor(size: number) {\n    // this.boardState = new BoardState([\n    //   [0, 0, 0, 0],\n    //   [0, 0, 0, 0],\n    //   [0, 0, 0, 0],\n    //   [0, 0, 0, 0],\n    // ]).insertTile.insertTile;\n    this.boardState = BoardState.fromSize(size);\n    this.pastTime = 0;\n    this.totalScore = 0;\n  }\n\n  public static boardBorder = 4;\n  public static pieceSize = 64;\n  public static pieceMiddleOffset = Game.pieceSize / 2;\n\n  move(movementCode: number) {\n    let result;\n    switch (movementCode) {\n      case 38:\n        result = this.boardState.up;\n        break;\n      case 37:\n        result = this.boardState.left;\n        break;\n      case 40:\n        result = this.boardState.down;\n        break;\n      case 39:\n        result = this.boardState.right;\n        break;\n      default:\n        result = null;\n    }\n\n    this.totalScore += result?.combinedScore ?? 0;\n\n    if (this.boardState.higherPiece === 11) this.gameOver();\n\n    if (!result || result.boardState.equals(this.boardState)) return;\n\n    this.boardState = result.boardState.insertTile;\n  }\n\n  public get higherPiece() {\n    return this.boardState.higherPiece;\n  }\n\n  public gameOver() {\n    this._ended = true;\n  }\n\n  public get ended() {\n    return this._ended;\n  }\n\n  get possibleMovements() {\n    const isLeftAllowed = this.boardState.leftAllowed;\n    const isUpAllowed = this.boardState.upAllowed;\n    const isRightAllowed = this.boardState.rightAllowed;\n    const isDownAllowed = this.boardState.downAllowed;\n\n    return [\n      isLeftAllowed ? 1 : 0,\n      isUpAllowed ? 1 : 0,\n      isRightAllowed ? 1 : 0,\n      isDownAllowed ? 1 : 0,\n    ];\n  }\n}\n","type CombinedBoardState = {\n  boardState: BoardState;\n  combinedScore: number;\n};\n\ntype CellCord = { i: number; j: number };\n\nexport class BoardState {\n  public static findEmptyCells(state: number[][]) {\n    const emptyCells: CellCord[] = [];\n\n    state.forEach((row, i) => {\n      row.forEach((value, j) => {\n        if (value > 0) return;\n        emptyCells.push({ i, j });\n      });\n    });\n\n    return emptyCells;\n  }\n\n  public static fromSize(size: number) {\n    const state: number[][] = [];\n    for (let i = 0; i < size; i++) {\n      const row: number[] = [];\n      for (let j = 0; j < size; j++) {\n        row[j] = 0;\n      }\n      state[i] = row;\n    }\n\n    BoardState.insertRandomTile(state, BoardState.findEmptyCells(state));\n    BoardState.insertRandomTile(state, BoardState.findEmptyCells(state));\n\n    return new BoardState(state, BoardState.findEmptyCells(state));\n  }\n\n  public static insertRandomTile(state: number[][], emptyCells: CellCord[]) {\n    if (emptyCells.length === 0) throw new Error('No empty cell to insert new tile');\n\n    const randomCellCord = Math.floor(Math.random() * emptyCells.length);\n    const { i, j } = emptyCells[randomCellCord];\n\n    state[i][j] = Math.random() < 0.1 ? 2 : 1;\n\n    return { state, inserted: randomCellCord };\n  }\n\n  private readonly state: number[][];\n  public readonly size: number;\n  public readonly emptyCells?: CellCord[];\n\n  constructor(state: number[][], emptyCells?: CellCord[]) {\n    this.state = state;\n    this.size = state[0].length;\n    this.emptyCells = emptyCells;\n\n    this.forEachPiece((value) => {\n      if (value == null) throw new Error('Undefined tile invalid!');\n    });\n  }\n\n  public get value(): number {\n    return this.state.reduce(\n      (acc, row) => acc + row.reduce((acc, value) => acc + value, 0),\n      0,\n    );\n  }\n\n  public get pieceCount(): number {\n    return this.state.reduce((acc, row) => acc + row.reduce((acc) => acc + 1, 0), 0);\n  }\n\n  public get copyState(): number[][] {\n    return [...this.state.map((row) => [...row])];\n  }\n\n  private get reverse(): BoardState {\n    const reversed: number[][] = [];\n\n    this.state.forEach((row, i) => {\n      const reversedRow: number[] = [];\n      row.forEach((_, j) => {\n        reversedRow.push(this.state[i][this.size - 1 - j]);\n      });\n      reversed[i] = reversedRow;\n    });\n\n    return new BoardState(reversed);\n  }\n\n  private get combine(): CombinedBoardState {\n    let combinedScore = 0;\n    const combined = this.copyState;\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size - 1; j++) {\n        if (combined[i][j] != 0 && combined[i][j] == combined[i][j + 1]) {\n          combined[i][j] += 1;\n          combined[i][j + 1] = 0;\n\n          combinedScore += Math.pow(2, combined[i][j]);\n        }\n      }\n    }\n    return {\n      boardState: new BoardState(combined),\n      combinedScore,\n    };\n  }\n\n  private get stack(): BoardState {\n    const stacked = this.copyState;\n    for (let x = 0; x < this.size; x++) {\n      for (let i = 0; i < stacked.length; i++) {\n        let emptyColumns: number[] = [];\n        for (let j = 0; j < stacked[i].length; j++) {\n          if (stacked[i][j] === 0) {\n            emptyColumns.push(j);\n          } else {\n            const emptyColumn = emptyColumns.shift();\n            if (emptyColumn !== undefined) {\n              stacked[i][emptyColumn] = stacked[i][j];\n              stacked[i][j] = 0;\n              emptyColumns.push(j);\n            }\n          }\n        }\n      }\n    }\n    return new BoardState(stacked);\n  }\n\n  private get transpose(): BoardState {\n    const transposed: number[][] = this.copyState;\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        transposed[i][j] = this.state[j][i];\n      }\n    }\n\n    return new BoardState(transposed);\n  }\n\n  get up(): CombinedBoardState {\n    const { boardState, combinedScore } = this.transpose.stack.combine;\n    return { boardState: boardState.stack.transpose, combinedScore };\n  }\n\n  get left(): CombinedBoardState {\n    const { boardState, combinedScore } = this.stack.combine;\n    return { boardState: boardState.stack, combinedScore };\n  }\n\n  get down(): CombinedBoardState {\n    const { boardState, combinedScore } = this.transpose.reverse.stack.combine;\n    return {\n      boardState: boardState.stack.reverse.transpose,\n      combinedScore,\n    };\n  }\n\n  get right(): CombinedBoardState {\n    const { boardState, combinedScore } = this.reverse.stack.combine;\n    return {\n      boardState: boardState.stack.reverse,\n      combinedScore,\n    };\n  }\n\n  get leftAllowed() {\n    return !this.equals(this.left.boardState);\n  }\n\n  get upAllowed() {\n    return !this.equals(this.up.boardState);\n  }\n\n  get rightAllowed() {\n    return !this.equals(this.right.boardState);\n  }\n\n  get downAllowed() {\n    return !this.equals(this.down.boardState);\n  }\n\n  get isStuck() {\n    return (\n      !this.leftAllowed && !this.upAllowed && !this.rightAllowed && !this.downAllowed\n    );\n  }\n\n  get possibleMovements() {\n    const movements = [];\n\n    if (this.leftAllowed) movements.push(0);\n    if (this.upAllowed) movements.push(1);\n    if (this.rightAllowed) movements.push(2);\n    if (this.downAllowed) movements.push(3);\n\n    return movements;\n  }\n  move(movement: number) {\n    switch (movement) {\n      case 0:\n        return this.left;\n      case 1:\n        return this.up;\n      case 2:\n        return this.right;\n      case 3:\n        return this.down;\n      default:\n        return { boardState: this, combinedScore: 0 };\n    }\n  }\n\n  get insertTile(): BoardState {\n    const emptyCells = this.emptyCells || BoardState.findEmptyCells(this.state);\n\n    const { state, inserted } = BoardState.insertRandomTile(this.copyState, emptyCells);\n\n    emptyCells.splice(inserted, 1);\n\n    return new BoardState(state, emptyCells);\n  }\n\n  equals(boardState: BoardState) {\n    const { state } = boardState;\n    for (let i = 0; i < this.state.length; i++) {\n      let row = this.state[i];\n      for (let j = 0; j < row.length; j++) {\n        let n = row[j];\n        if (n !== state[i][j]) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  forEachPiece(func: (value: number) => void) {\n    this.state.forEach((row) => row.forEach(func));\n  }\n\n  get higherPiece() {\n    let max = 0;\n    this.forEachPiece((value) => {\n      if (value > max) max = value;\n    });\n    return max;\n  }\n}\n","import { AutoPlayer } from './auto';\nimport { Game } from '../game/game';\nimport { BoardState } from '../game/boardState';\n\nexport class SearchTreePlayer extends AutoPlayer {\n  private static moveAndInsertTile(inputBoard: BoardState, move: number) {\n    const { combinedScore, boardState } = inputBoard.move(move);\n    if (boardState.equals(inputBoard)) return null;\n    return {\n      boardState: boardState.insertTile,\n      score: combinedScore,\n    };\n  }\n  private static randomRun(inputBoard: BoardState, move: number) {\n    let result = SearchTreePlayer.moveAndInsertTile(inputBoard, move);\n    if (result === null) return 0;\n    let { boardState, score } = result;\n    let tries = 0;\n    while (true) {\n      if (tries === 4) break;\n      const randomMovement = Math.floor(Math.random() * 4);\n      const result = SearchTreePlayer.moveAndInsertTile(boardState, randomMovement);\n      if (result === null) {\n        tries++;\n      } else {\n        tries = 0;\n        boardState = result.boardState;\n        score += result.score;\n      }\n    }\n    return score;\n  }\n\n  private readonly runs: number;\n\n  constructor(game: Game, runs: number) {\n    super(game);\n    this.runs = runs;\n  }\n\n  protected get moveOption(): number {\n    let bestScore = 0;\n    let bestMove = -1;\n\n    for (let movement = 0; movement < this.game.boardState.size; movement++) {\n      let total = 0.0;\n      // let min = 1000000;\n      // let max = 0;\n\n      for (let i = 0; i < this.runs; i++) {\n        const score = SearchTreePlayer.randomRun(this.game.boardState, movement);\n\n        total += score;\n        // if (score < min) min = score;\n        // if (score > max) max = score;\n      }\n\n      const averageScore = total / this.runs;\n\n      if (averageScore > bestScore) {\n        bestScore = averageScore;\n        bestMove = movement;\n      }\n    }\n\n    return bestMove;\n  }\n}\n","import { Player } from './player';\n\nexport abstract class AutoPlayer extends Player {\n  private static moveOptions = [37, 38, 39, 40];\n\n  keyPressed(evt: { keyCode: number }) {}\n\n  turnPassed() {\n    if (this.game.ended) return;\n    const moveOption = this.moveOption;\n    if (moveOption < 0) {\n      this.game.gameOver();\n    } else {\n      this.game.move(AutoPlayer.moveOptions[moveOption]);\n    }\n  }\n\n  protected abstract get moveOption(): number;\n\n  get fitness() {\n    const totalScore = this.game.totalScore ?? 0;\n    const scorePerPiece = this.game.scorePerPiece ?? 0;\n    return totalScore + scorePerPiece * (this.game.pieceCount ?? 0);\n  }\n}\n","import { Game } from '../game/game';\n\nexport abstract class Player {\n  game: Game;\n\n  constructor(game: Game) {\n    this.game = game;\n  }\n\n  abstract keyPressed(evt: { keyCode: number }): void;\n  abstract turnPassed(): void;\n}\n","import { Player } from './player';\n\nexport class KeyboardPlayer extends Player {\n  keyPressed(evt: { keyCode: number }) {\n    this.game.move(evt.keyCode);\n  }\n  turnPassed() {}\n}\n"]}